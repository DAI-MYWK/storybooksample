storybook_setup:
  前提:
    - ホームページのデザインは HTML / CSS / JS で構成されている
    - セクションごとに `.stories.js` ファイルを作成して管理する
    - Storybook は HTML ベースで使用する（React/Vue などは使わない）
    - まずは1つのサイト分のデザインを対象にする（例：site）

  フォルダ構成: |
    homepage-site/
    ├── .storybook/
    │   ├── main.js
    │   └── preview.js
    ├── css/
    │   └── style.css
    ├── js/
    │   └── script.js
    ├── sections/
    │   ├── Hero.stories.js
    │   ├── Header.stories.js
    │   ├── About.stories.js
    │   ├── Service.stories.js
    │   ├── Staff.stories.js
    │   ├── Contact.stories.js
    │   └── Footer.stories.js
    ├── assets/
    │   └── images/
    ├── package.json
    └── index.html

  セットアップ手順:
    1. 依存関係の設定:
      ```json
      {
        "name": "homepage-storybook",
        "version": "1.0.0",
        "scripts": {
          "storybook": "storybook dev -p 6006",
          "build-storybook": "storybook build"
        },
        "devDependencies": {
          "@storybook/html": "^7.4.0",
          "@storybook/blocks": "^7.4.0",
          "@storybook/html-vite": "^7.4.0",
          "@storybook/addon-actions": "^7.4.0",
          "@storybook/addon-essentials": "^7.4.0",
          "@storybook/addon-interactions": "^7.4.0",
          "@storybook/addon-links": "^7.4.0",
          "@storybook/testing-library": "^0.2.0",
          "storybook": "^7.4.0"
        }
      }
      ```

    2. フォルダ構成の整理:
      ```bash
      mkdir -p .storybook css js sections assets/images
      mv style.css css/
      mv script.js js/
      mv img/* assets/images/
      ```

    3. 画像パスの一括修正:
      ```bash
      sed -i '' 's/src="img\//src="assets\/images\//g' index.html
      ```

    4. index.htmlのパス修正:
      - CSS: `<link rel="stylesheet" href="css/style.css" />`
      - JS: `<script src="js/script.js"></script>`

  設定ファイル:
    main.js: |
      export default {
        stories: ["../sections/**/*.stories.js"],
        addons: [
          "@storybook/addon-links",
          "@storybook/addon-essentials",
          "@storybook/addon-interactions",
        ],
        framework: {
          name: "@storybook/html-vite",
          options: {},
        },
        core: {
          builder: "@storybook/builder-vite",
        },
        docs: {
          autodocs: "tag",
        },
      };

    preview.js: |
      // 共通のCSSとJSを読み込み
      import "../css/style.css";

      // 外部ライブラリのCSSを読み込み
      const aosCSS = document.createElement("link");
      aosCSS.rel = "stylesheet";
      aosCSS.href = "https://unpkg.com/aos@2.3.1/dist/aos.css";
      document.head.appendChild(aosCSS);

      const magnificCSS = document.createElement("link");
      magnificCSS.rel = "stylesheet";
      magnificCSS.href = "https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/magnific-popup.min.css";
      document.head.appendChild(magnificCSS);

      // 外部ライブラリのJSを読み込み
      const loadExternalLibraries = () => {
        // jQuery
        const jqueryScript = document.createElement("script");
        jqueryScript.src = "https://code.jquery.com/jquery-3.6.0.min.js";
        jqueryScript.async = false;
        document.head.appendChild(jqueryScript);

        // AOS (Animate On Scroll)
        const aosScript = document.createElement("script");
        aosScript.src = "https://unpkg.com/aos@2.3.1/dist/aos.js";
        aosScript.async = false;
        document.head.appendChild(aosScript);

        // Magnific Popup
        const magnificScript = document.createElement("script");
        magnificScript.src = "https://cdnjs.cloudflare.com/ajax/libs/magnific-popup.js/1.1.0/jquery.magnific-popup.min.js";
        magnificScript.async = false;
        document.head.appendChild(magnificScript);
      };

      // ライブラリを読み込み
      loadExternalLibraries();

      // jQueryが読み込まれてからscript.jsを読み込み
      const waitForJQuery = setInterval(() => {
        if (typeof window.$ !== "undefined") {
          clearInterval(waitForJQuery);
          import("../js/script.js");
        }
      }, 100);

      export const parameters = {
        actions: { argTypesRegex: "^on[A-Z].*" },
        controls: {
          matchers: {
            color: /(background|color)$/i,
            date: /Date$/,
          },
        },
      };

  ルール:
    命名規則:
      - 各セクションは「セクション名.stories.js」で保存（例：Hero.stories.js）
      - `title` は "Sections/セクション名"（例：Sections/Hero）

    HTMLの書き方:
      - `.stories.js` の中では HTML を文字列で返す関数を書く
      - CSS/JS は書かず、`preview.js` で一括読み込み
      - 画像パスは `./assets/images/` で指定する

    storiesファイルの構成:
      ```javascript
      export default {
        title: "Sections/セクション名",
        parameters: {
          layout: "fullscreen",
          docs: {
            description: {
              component: "セクションの説明文",
            },
          },
        },
        tags: ["autodocs"],
      };

      export const Default = () => `
        <!-- HTMLコード -->
      `;

      // ソースコード表示の設定
      Default.parameters = {
        docs: {
          source: {
            type: "code",
            language: "html",
          },
        },
      };
      ```

    共通CSS/JS:
      - `css/style.css`：すべてのセクションに共通で使うスタイル
      - `js/script.js`：JSが必要なセクションがある場合に読み込む
      - どちらも `preview.js` で読み込むことで全体に適用される

    画像やフォントなど:
      - `assets/images/` にまとめて配置
      - `<img src="./assets/images/logo.png">` のように相対パスで指定する
      - Storybookでは webpack が public path を変えるので注意

    セクション追加手順:
      - 該当セクションのHTMLを `.stories.js` に変換して `sections/` に追加
      - `main.js` の `stories` 設定に入っていれば自動でStorybookに表示される

    JavaScriptエラーハンドリング:
      - script.js内でjQueryの存在確認を行う
      ```javascript
      // DOM Content Loaded
      document.addEventListener("DOMContentLoaded", function () {
        // Initialize AOS if available
        if (typeof AOS !== "undefined") {
          AOS.init({
            duration: 800,
            easing: "ease-in-out",
            once: true,
            offset: 100,
          });
        }
        // 他の初期化処理...
      });

      // jQuery依存の機能は関数化
      function initJQueryFeatures() {
        if (typeof $ !== "undefined") {
          $(document).ready(function () {
            // jQuery依存の処理
          });
        }
      }

      // jQueryが読み込まれた後に実行
      if (typeof $ !== "undefined") {
        initJQueryFeatures();
      } else {
        const checkJQuery = setInterval(() => {
          if (typeof $ !== "undefined") {
            clearInterval(checkJQuery);
            initJQueryFeatures();
          }
        }, 100);
      }
      ```

  起動方法:
    - 依存関係インストール: `npm install`
    - 開発プレビュー: `npm run storybook`
    - 本番公開用ビルド: `npm run build-storybook`（`storybook-static/` が生成される）

  ソースコード確認方法:
    - Docsタブをクリック：各セクションの説明とソースコードが表示
    - Canvasタブの「Show code」ボタン：現在のコンポーネントのHTMLが表示
    - Controlsパネル：右側のパネルでソースコードセクションを確認

  トラブルシューティング:
    jQueryエラー対策:
      - `ReferenceError: $ is not defined` が発生した場合
      - preview.jsでjQueryの読み込み順序を確認
      - script.js内でjQueryの存在確認を行う

    画像が表示されない場合:
      - 画像パスが `./assets/images/` になっているか確認
      - 画像ファイルがassetsフォルダに移動されているか確認

    CSSが適用されない場合:
      - preview.jsでCSSが正しく読み込まれているか確認
      - パスが `../css/style.css` になっているか確認

    AOSアニメーションが動かない場合:
      - AOSライブラリが読み込まれているか確認
      - script.js内でAOSの存在確認を行う

  補足:
    - 社内共有したい場合は、GitHub + Vercel や `storybook-static` をイントラに配置
    - CSSの競合やJSの初期化問題があれば、プレフィックスや `setTimeout`、`play()` 関数の利用で調整可能
    - 新しいホームページを追加する場合は、同じ手順でフォルダ構成を整理してから実行する
    - 複数のサイトを管理する場合は、プロジェクトごとに別々のフォルダで管理することを推奨
